unit DAO_Clientes;

interface
uses
  System.SysUtils,
  Data.DB,
  DTO_Clientes,
  FireDAC.Comp.Client,
  FireDAC.Stan.Param;
type
  TDaoClientes = class
  strict private
    const
      Select: System.UnicodeString =
          'SELECT ' +
          '  codigo,'+
          '  nome,'+
          '  cidade,'+
          '  uf'+
          'FROM ' +
          '  clientes' +
          'WHERE codigo = :codigo ';
      Insert: System.UnicodeString =
          'INSERT INTO clientes(' +
          '  codigo,'+
          '  nome,'+
          '  cidade,'+
          '  uf'+
          'VALUES('+
          '  :codigo,'+
          '  :nome,'+
          '  :cidade,'+
          '  :uf)';
      Update: System.UnicodeString =
          'UPDATE ' +
          ' clientes ' +
          'SET ' +
          '  nome = :nome, '+
          '  cidade = :cidade, '+
          '  uf = :uf';

      Delete: System.UnicodeString =
          'DELETE FROM clientes ' +
          'WHERE ' +
          '  codigo = :codigo';
  private
    FConnection: TFDConnection;
    class procedure InternalLoad(var AQuery: TFDQuery; const AObject: TDtoCliente); static;
    function GetNextID(AQuery: TFDQuery): System.Integer;
  public
      constructor Create(AConnection: TFDConnection);
      procedure UnsafeSave(const AObject: TDtoCliente);
      procedure Save(const AObject: TDtoCliente);
      function Load   (const AObject: TDtoCliente; const ACodigo: System.Integer): Boolean;
      function LoadListPorCidade  (const AObjectList: TDtoClientes; const ACidade: System.Integer): Boolean;
      procedure UnSafeDelete (const AID: System.Integer);
      procedure SafeDelete (const AID: System.Integer);
  end;
implementation
  uses
    System.TypInfo;
{ TDaoClientes }

constructor TDaoClientes.Create(AConnection: TFDConnection);
begin
  FConnection := AConnection;
end;

class procedure TDaoClientes.InternalLoad(var AQuery: TFDQuery;const AObject: TDtoCliente);
begin
  AObject.Codigo := AQuery.FieldByName('codigo').AsInteger;
  AObject.nome := AQuery.FieldByName('nome').AsString;
  AObject.cidade := AQuery.FieldByName('cidade').AsString;
  AObject.uf := AQuery.FieldByName('uf').AsString;
end;

function TDaoClientes.Load(const AObject: TDtoCliente; const ACodigo: System.Integer): Boolean;
const
  CWhere =
    'WHERE ' +
    '  codigo = :codigo';
var
  LQuery: TFDQuery;
begin
  Result := False;
  if (ACodigo > 0) then
  begin
    LQuery := TFDQuery.Create(nil);
    LQuery.Connection := FConnection;
    LQuery.SQL.Add(Select+CWhere);
    LQuery.ParamByName('codigo').AsInteger := ACodigo;
    LQuery.Open;
    Result := not(LQuery.IsEmpty);
    if not(LQuery.IsEmpty) then
      InternalLoad(LQuery, AObject);
  end;
end;

function TDaoClientes.LoadListPorCidade(const AObjectList: TDtoClientes;
  const AProfessorID: System.Integer): Boolean;
const
  CWhere =
    'WHERE ' +
    '  ID_PROFESSOR = :ID_PROFESSOR ';
var
  LQuery: TFDQuery;
  LObjectAux : TDtoCliente;
begin
  Result := False;
  if (AProfessorID > 0) then
  begin
    LQuery := TFDQuery.Create(nil);
    LQuery.Connection := FConnection;
    LQuery.SQL.Add(Select+CWhere);
    LQuery.ParamByName('ID_PROFESSOR').AsInteger := AProfessorID;
    LQuery.Open;
    Result := not(LQuery.IsEmpty);
    if not(LQuery.IsEmpty) then
    LQuery.First;
    while not(LQuery.Eof) do
    begin
      LObjectAux := TDtoCliente.Create;
      InternalLoad(LQuery, LObjectAux);
      AObjectList.Add(LObjectAux);
    end;
  end;
end;
function TDaoClientes.GetNextID(AQuery: TFDQuery): System.Integer;
begin
  AQuery.SQL.Clear;
  AQuery.Open('SELECT GEN_ID(GEN_ClientesS, 1) as ID FROM RDB$DATABASE;');
  if not(AQuery.IsEmpty) then
    Result := AQuery.FieldByName('ID').AsInteger
  else
    Result := 0;
  AQuery.SQL.Clear;
end;
procedure TDaoClientes.SafeDelete(const AID: System.Integer);
begin
  FConnection.StartTransaction;
  try
    UnSafeDelete(AID);
    FConnection.Commit;
  except
    FConnection.Rollback;
    raise
  end;
end;
procedure TDaoClientes.Save(const AObject: TDtoCliente);
begin
   FConnection.StartTransaction;
   try
      UnsafeSave(AObject);
      FConnection.Commit;
   except
      FConnection.Rollback;
      raise;
   end;
end;
procedure TDaoClientes.UnSafeDelete(const AID: System.Integer);
var
  LQuery: TFDQuery;
begin
  LQuery := TFDQuery.Create(nil);
  LQuery.Connection := FConnection;
  LQuery.SQL.Add(Delete);
  LQuery.ParamByName('ID').AsInteger := AID;
  LQuery.ExecSQL;
end;
procedure TDaoClientes.UnsafeSave(const AObject: TDtoCliente);
var
  LQuery: TFDQuery;
  LId: System.Integer;
begin
  LQuery := TFDQuery.Create(nil);
  LQuery.Connection := FConnection;
  try
    if (AObject.Id <= 0) then
    begin
      LId := GetNextID(LQuery);
      LQuery.SQL.Add(Insert);
    end else
    begin
      LId := AObject.ID;
      LQuery.SQL.Add(Update);
    end;
    LQuery.ParamByName('ID').AsInteger := LId;
    LQuery.ParamByName('ID_ALUNO').AsInteger := AObject.ID_ALUNO;
    LQuery.ParamByName('ID_PROFESSOR').AsInteger := AObject.ID_PROFESSOR;
    LQuery.ParamByName('NOTA_BIM1').AsInteger := AObject.NOTA_BIM1;
    LQuery.ParamByName('NOTA_BIM2').AsInteger := AObject.NOTA_BIM2;
    LQuery.ParamByName('NOTA_BIM3').AsInteger := AObject.NOTA_BIM3;
    LQuery.ParamByName('NOTA_BIM4').AsInteger := AObject.NOTA_BIM4;
    LQuery.ExecSQL;
  finally
    LQuery.Free;
  end;
end;
end.
