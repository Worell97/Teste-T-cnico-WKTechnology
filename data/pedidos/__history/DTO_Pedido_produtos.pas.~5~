unit DTO_Pedido_produtos;

interface
uses
  System.Generics.Collections, FireDAC.Comp.Client;
type
  TDtoCliente = class;
  TDtoClientes = class;
  TDtoCliente = class(TObject)
  private
    { private declarations }
    FId: System.Integer;
    FPedido: System.Integer;
    FCodProduto: System.Integer;
    FQuantidade: System.Double;
    FVlrUnitario: System.Double;
    FVlrTotal: System.Double;
    procedure InternalClear();
    procedure SetId(const AId: System.Integer);
    procedure SetPedido(const APedido: System.Integer);
    procedure SetCodProduto(const ACodProduto: System.Integer);
    procedure SetQuantidade(const AQuantidade: System.Double);
    procedure SetVlrUnitario(const AVlrUnitario: System.Double);
    procedure SetVlrTotal(const AVlrTotal: System.Double);
    function GetId(): System.Integer;
    function GetPedido(): System.Integer;
    function GetCodProduto(): System.Integer;
    function GetQuantidade(): System.Double;
    function GetVlrUnitario(): System.Double;
    function GetVlrTotal(): System.Double;
  public
    constructor Create();
    procedure Clear; inline;
    property Id: System.Integer read GetId write SetId;
    property Pedido: System.Integer read GetPedido write SetPedido;
    property CodProduto: System.Integer read GetCodProduto write SetCodProduto;
    property Quantidade: System.Double read GetQuantidade write SetQuantidade;
    property VlrUnitario: System.Double read GetVlrUnitario write SetVlrUnitario;
    property VlrTotal: System.Double read GetVlrTotal write SetVlrTotal;
  end;
  TDtoClientes = class(TObjectList<TDtoCliente>)
  end;
implementation
{ TDtoCliente }

procedure TDtoCliente.Clear;
begin
  Self.InternalClear();
end;

constructor TDtoCliente.Create();
begin
  Self.InternalClear();
end;

function TDtoCliente.GetId: System.Integer;
begin
  Result := FId;
end;

function TDtoCliente.GetPedido: System.Integer;
begin
  Result := FPedido;
end;

function TDtoCliente.GetCodProduto: System.Integer;
begin
  Result := FCodProduto;
end;

function TDtoCliente.GetQuantidade: System.Double;
begin
  Result := FQuantidade;
end;

function TDtoCliente.GetVlrUnitario: System.Double;
begin
  Result := FVlrUnitario;
end;

function TDtoCliente.GetVlrTotal: System.Double;
begin
  Result := FVlrTotal;
end;

procedure TDtoCliente.InternalClear;
begin
  FId := 0;
  FPedido := 0;
  FCodProduto := 0;
  FQuantidade := 0;
  FVlrUnitario := 0;
  FVlrTotal := 0;
end;

procedure TDtoCliente.SetId(const AId: System.Integer);
begin
  FId := AId;
end;

procedure TDtoCliente.SetPedido(const APedido: System.Integer);
begin
  FPedido := APedido;
end;

procedure TDtoCliente.SetCodProduto(const ACodProduto: System.Integer);
begin
  FCodProduto :=ACodProduto;
end;

procedure TDtoCliente.SetQuantidade(const AQuantidade: System.Double);
begin
  FQuantidade := AQuantidade;
end;

procedure TDtoCliente.SetVlrUnitario(const AVlrUnitario: System.Double);
begin
  FQuantidade := AVlrUnitario;
end;

procedure TDtoCliente.SetVlrTotal(const AVlrTotal: System.Double);
begin
  FQuantidade := AVlrTotal;
end;

end.
